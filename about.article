# Learning RISC-V
with embedded targets and QEMU
11 May 2023

Loh Siu Yin
Beyond Broadcast LLP
siuyin@beyondbroadcast.com

## Why this article?

The chips I use are ARM Cortex M0/M0+, MSP430G2, PIC16 and STM8.

I then came across RISC-V RV32EC in the form of the CH32V003.
The `32` means 32-bit. `E` is for the embedded capability and
`C` for compressed instructions to help reduce code size.

Each device had a steep learning curve and RISC-V was similar.
The amount of resources was overwhelming. Where do I start?
How do I create bare-metal code to blink an LED?

My starting point was: [https://riscv.org/](https://riscv.org/).


## Running Linux on QEMU
[https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html](https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html)
shows you how to _almost_ get a QEMU environment up the hard way.
You compile QEMU, Linux and BusyBox for RISC-V.
I later found I could also use the QEMU packaged the linux distribution I used. 
For Ubuntu 22.04 it was the `qemu-system-misc` package.

When I got to the running stage at [https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html#running](https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html#running),
it crashed with:

```
[    1.200880] [<ffffffff80825ac4>] kernel_init+0x1e/0x10a
[    1.201294] [<ffffffff80003762>] ret_from_fork+0xa/0x1c
[    1.202683] ---[ end Kernel panic - not syncing: VFS: Unable to mount root fs on unknown-block(254,0) ]---
QEMU: Terminated
```

After searching the internet, I learned I needed to provide an initial ram filesystem.
The invocation that finally worked for me was:

`runqemu.sh:`

.code runqemu.sh

And the output was a root linux prompt in QEMU:

```
[    1.368036] clk: Disabling unused clocks
[    1.448878] Freeing unused kernel image (initmem) memory: 2184K
[    1.450971] Run /init as init process

Boot took 1.71 seconds

Ctrl a x to exit QEMU
~ # 
```

But how do you get that `initramfs.cpio.gz` file?

## Using Busybox as the root filesystem in RISC-V QEMU

After more searching on the internet, I found: [https://gist.github.com/chrisdone/02e165a0004be33734ac2334f215380e](https://gist.github.com/chrisdone/02e165a0004be33734ac2334f215380e)

That lead me to write:

`mkinitramfs.sh:`

.code mkinitramfs.sh

And my `init`:

.code init

For reference here is a snapshot of my project root layout:

```
siuyin@ln03:~/riscv64-linux$ ls -F
about.article  busybox/  go.sum  hello.o  initramfs/         linux/           README.md    src/
build.sh*      go.mod    hello*  init*    initramfs.cpio.gz  mkinitramfs.sh*  runqemu.sh*
```

Ignore the go.sum and go.mod files as there are there only to support this `about.article` I am writing.

## Running a RISC-V binary in QEMU running RISC-V Linux
I chose to learn RISC-V assembly first as that was closest to the bare metal.
Below is my hello world in assembly.

You may find this quick reference card handy: [https://www.cl.cam.ac.uk/teaching/1617/ECAD+Arch/files/docs/RISCVGreenCardv8-20151013.pdf](https://www.cl.cam.ac.uk/teaching/1617/ECAD+Arch/files/docs/RISCVGreenCardv8-20151013.pdf)

`src/linux/hello.s:`

.code src/linux/hello.s

If you looked closely at my `mkinitramfs.sh` earlier,
you will see that I copied the `hello` binary to the `initramfs.cpio.gz` .

This is how I built the `hello` binary:

`build.sh:`

.code build.sh

The `-march=rv64imac` reads: assemble for  RISC-V 64bit with integer, multiply (and divide), atomic instructions and compressed instructions.

Below is the output of a run in QEMU:

```
[    1.418066] Freeing unused kernel image (initmem) memory: 2184K
[    1.420248] Run /init as init process

Boot took 1.67 seconds

Ctrl a x to exit QEMU
~ # ls -F
bin/     etc/     init*    proc/    sbin/    usr/
dev/     hello*   linuxrc@ root/    sys/
~ # ./hello 
Hello World.
~ #
```

## Running RISC-V on QEMU 'bare-metal'

In the previous example I `syscall`'ed into Linux to print a string and to exit.
Microcontrollers can be very small and usually will not run Linux. They may not run any operating system at all.

Thus my next RISC-V assembly program targets a sifive_e board that is emulated by QEMU.

```
siuyin@ln03:~/riscv64-linux$ qemu-system-riscv32 -machine help
Supported machines are:
none                 empty machine
opentitan            RISC-V Board compatible with OpenTitan
sifive_e             RISC-V Board compatible with SiFive E SDK
sifive_u             RISC-V Board compatible with SiFive U SDK
spike                RISC-V Spike board (default)
virt                 RISC-V VirtIO board
```

[https://github.com/qemu/qemu/blob/792f77f376adef944f9a03e601f6ad90c2f891b2/hw/riscv/sifive_e.c#L15](https://github.com/qemu/qemu/blob/792f77f376adef944f9a03e601f6ad90c2f891b2/hw/riscv/sifive_e.c#L15) gives more details about the emulated board.

### Assembly code for the emulated red-v board
The sifive_e board emulates a serial port (UART) that allows strings to be printed onto the QEMU console.

`puts` in the assembly code below writes to the serial port.

`src/embed/embedhello.s:`

.code /src/embed/embedhello.s

### RISC-V privileged mode and multiple hardware threads
The `csrr` instruction surprised me. Normally embedded processes are single core with a single thread of execution.
With some implementations, you may have multiple cores. This codes targets only the core with thread ID of zero.

.code /src/embed/embedhello.s /mhartid/,/bnez/

See the extract from the RISC-V manual volume 2 below:

<img src="img/mhartid.png" width="800"/>


### A customized linker script for the Red-V board
`stack_top` is defined in the linker script

`red-v.ld:`

.code src/embed/red-v.ld

After a red-v board is reset, its firmware points to address `0x20010000` to start executing code found there.
This address is in the QSPI flash area.

However the stack must sit in RAM and that starts at address `0x80000000` in the red-v board.

<img src="img/fe310-memory-map.png" width="800"/>

[https://sourceware.org/binutils/docs/ld/Scripts.html](https://sourceware.org/binutils/docs/ld/Scripts.html) is the GNU Binutils LD linker script reference.

### Output of 'bare-metal' assembly code

`src/embed/run-qemu.sh:'

.code src/embed/run-qemu.sh

Note the machine type is 'sifive_e'.

```
$ ./run-qemu.sh 
exit QEMU: Ctrl a x


Hello risc-v!
This is my second string.
```

## C code for the emulated red-v board
Below is the startup `assembly` code to jump to the main C code.

`src/c_embed/startup.s:`

.code src/c_embed/startup.s

And below is the main C code.

`src/c_embed/main.c:`

.code src/c_embed/main.c


Let's take a closer look at:

.code src/c_embed/main.c /while/,/$/

We cast the `size_t` pointed to by UART_BASE to a `volatile int`.

`volatile` tells the compiler the value may be changed by the hardware and
thus to not eliminate it when optimizing the code.

`int` makes it a signed integer. As the red-v manual extract below states,
the most significant bit (MSB) will be set if the FIFO is full --  and thus not ready to take another byte.
if the MSB is set, it is a negative number.

Thus the code reads:  
wait for the TX FIFO to be not full then write `ch` to the memory pointed to by `TXDATA`.


.code src/c_embed/main.c /while/,/TXDATA = ch/

<img src="img/txdata.png" width="800"/>

### Makefile for embedded C

`src/c_embed/Makefile:`

.code src/c_embed/Makefile

The line:

.code src/c_embed/Makefile /no-builtin/,/$/

is needed because `gcc` already knows of a `putchar` function in libc and it is not a void function.

### Embedded C code output

`src/c_embed/run-qemu.sh:'

.code src/c_embed/run-qemu.sh

Note the machine type is 'sifive_e'.

```
$ ./run-qemu.sh 
exit QEMU: Ctrl a x


Hello RISC-V from C!
bye
```

## Really running RISC-V on the physical ch32v003 device

[Nanjing Qinheng Microelectronics](http://www.wch-ic.com/products/CH32V003.html), makers of the ch32v003 device have
good development system based on Eclipse. Their provided libraries
were decent but it still took a lot of poring over source code to 
understand what was going on.

Futher, their linker script and start-up code was dense and hard to understand.

I belive this is why CNLohr wrote the lightweight [ch32v003fun](https://github.com/cnlohr/ch32v003fun) development environment.
The environment consist of one C file, the associated header file, a linker script and
software to drive the device programmer.
The project is Open Source and I decided to use the linker script as the basis of my
"hello world" into ch32v003 RISC-V assembly programming.

### Code to blink an LED
On my development board -- just the ch32v003 part soldered to a breakout board --
I've connected an LED to PD0.
I found this listing of RISC-V [pseudo instructions](https://github.com/riscv-non-isa/riscv-asm-manual/blob/master/riscv-asm.md#-a-listing-of-standard-risc-v-pseudoinstructions) useful.
Pseudo instructions are human friendly instructions
that are translated by the assembler to actual RISC-V instructions.

I also found this [tutorial](https://medium.com/swlh/risc-v-assembly-for-beginners-387c6cd02c49) helpful.

<img src="img/ch32v003f4p6-pinout.png" width="800"/>

`src/ch32v003/blink/blink.S:`

.code src/ch32v003/blink/blink.S

Let's break this down part by part. First consider:

.code src/ch32v003/blink/blink.S /^\.align 2/,/^\.equ GPIOD_BSHR, 0x40011410/

`.align 2` tells the linker to place the code on a two-byte (16-bit) boundary.
This is allowed as the part implements compressed instructions (rv32ec).
If not code must be aligned on a word (32-bit) boundary.

What follows are `.equ` to equate symbols to memory-mapped register addresses.
`RCC_APB2PCENR`, read, RCC APB2 P C EN R is the:  
Reset and Clock Control  
Advanced Peripheral Bus 2  
Peripheral  
Clock   
Enable  
Register.

Now let's proceed to the system initialisation. 

.code src/ch32v003/blink/blink.S /^\.section \.text/,/la sp, _eusrstack/

The above code just loads the address of `_e usr stack` -- end of user stack
to the stack pointer register. This is the bare essentials to get started.

Next, we enable GPIOD by routing the device's internal clock to the GPIO internal module.
The device's reset condition is to use the 24MHz HSI RC oscillator with an AHB prescaler of
/3 (actual and not /1 documented in the reference manual).
This results in an HCLK of 8MHz being available to AHB and AHB2 peripherals.

But I don't see AHB2 ?! There is only one AHB bus on this device but on larger
devices the Advanced High-performance Bus (a term I belive originating from ARM devices)
are divided. Here on the ch32v003 AHB == AHB2 and vice-versa.

<img src="img/ch32v003-clock.png" width="800"/>

Here is how we actually enable GPIOD by feeding it the HCLK by setting bit 5 on RCC APB2 P C EN R.

<img src="img/RCC_APB2CENR.png" width="800"/>

.code src/ch32v003/blink/blink.S /gpiod_clk_en:/,/sw t0, 0\(t1\)/

Study the above code:
  
`li t0, 1<<5` **l**oads **i**mmediate into `t0` the binary value 100000. Note: the lowest bit is named bit-0.

What is `t0`? It is the ABI name for one of 16 CPU registers defined in RISC-V rv32e:

<img src="img/rv32e-regs.png" width="800"/>

Similarly RCC_APB2PCENR is loaded into `t1`.

Next comes `sw t0, 0(t1)`, which reads:  
**s**tore **w**ord in `t0` to the  
memory address pointed to by `t1`,  
offset by **0**.

When the above code executes, it stores `1<<5` to the RCC_ABP2PCENR register which then enables GPIOD.
The equivalent in C is: `RCC_APB2PCENR = 1<<5;`

The GPIO ports on the ch32v003 reset to a floating input condition, effectivly
disconnecting the IO pins from whatever they were connected to.
We want to make GPIO Port D pin 0 an output.

<img src="img/GPIOx_CFGLR.png" width="800"/>

The tricky part here is to configure only the bits relating to `PD0`,
leaving the rest unmodified.

.code src/ch32v003/blink/blink.S /gpiod_pd0_out:/,/sw t1, 0\(t0\)/

`lw t1, 0(t0)` : **l**oad **w**ord into `t1` from the memory address pointed to by `t0` offset by **0**.

`andi t1,t1,~(0xf)` : **and** **i**mmediate the binary value `1111..11110000` (32-bits)  
with the value in `t1` (the *second* `t1`)
and store the result in `t1` (the *first* `t1`).

When the above code is executed, binary value 0001 is stored into GPIOD_CFGLR and PD0 is now an output.

It is now time to turn on PD0. For that we need to modify yet another register: GPIOD_BSHR which reads, GPIOD BS H R:  
GPIOD  
Bit Set
High Reset .

<img src="img/GPIOD_BSHR.png" width="800"/>

Below is the code to assert PD0 to turn on the LED.

.code src/ch32v003/blink/blink.S /pd0_on:/,/jal delay/

`jal delay` : **j**ump **a**nd **l**ink to delay, means call the delay routine.

.code src/ch32v003/blink/blink.S /delay:/,/ret/

`beqz a0, .delay_end` : **b**ranch **eq**ual **z**ero to label `.delay_end` otherwise execute the following instruction.  
Which is `j .delay_1` : **j**ump to label `.delay_1`.

The code to turn off the LED is similar to the code to turning on the LED except that we write the `1` to the upper or higher half-word. This is why the regiter is named Reset High.

.code src/ch32v003/blink/blink.S /pd0_off:/,/jal delay/

Finally at the end of the on-delay-off-delay sequence, a jump is executed to repeat the whole cycle.
A tiny optimisation is made by jumping to label `.pd0_on_1` to skip reloading the address of GPIOD BS HR into `t0`.

.code src/ch32v003/blink/blink.S /pd0_on:/,/j .pd0_on_1/

The LED connected to PD0 now blinks!

### Makefile
The above was the assembler code, a `Makefile` is use by `make` to compile and link the code.

.code src/ch32v003/blink/Makefile

It is not very interesting as it mainly specifies that the `TARGET` is named blink and its extension is `.S` .
By the way, .s assember files only allow `.include FILE` but .S files are processed by the C pre-processor
to allow `#include "file"` and `#define ...` .

Here is the interesting `../ch32v003fun.mk` (credit CNLohr).
It is long, so just give it a quick read-over and then I will explain the key sections of the file.

.code src/ch32v003/ch32v003fun.mk

Let's first look at the step where the compiler/assember is invoked:

.code src/ch32v003/ch32v003fun.mk /\$\(TARGET\).elf : \$\(TARGET\).\$\(TARGET_EXT\)/,/\$\(PREFIX\)-gcc -o \$@ \$\^ \$\(CFLAGS\) \$\(LDFLAGS\)/

The above reads:  
```
to produced TARGET elf (executable and link format binary)  
check if TARGET.EXT (in our case blink.S) has changed  
if it has:  
  run GCC and output TARGET.elf (blink.elf) by compiling TARGET.EXT (blink.S)  
  with the following CFLAGS and LDFLAGS
if not, don't do anything.
```

Below are the CFLAGS:

.code src/ch32v003/ch32v003fun.mk /CFLAGS\+=/,/EXTRA_CFLAGS/

The interesting parts are:

`-static-libgcc` : use the static version of libgcc

`-ffunction-sections` : from the [gcc docs](https://gcc.gnu.org/onlinedocs/gcc-13.1.0/gcc/Optimize-Options.html).  
Place each function or data item into its own section in the output file if the target supports arbitrary sections.

`-mabi=ilp32e` : the machine application binary interface has integers,longs and pointer that are 32-bits wide,
with function calls according to the embedded (as in rv32e) conventions.

And the LDFLAGS:

.code src/ch32v003/ch32v003fun.mk /LDFLAGS\+=-T/,/$/

.code src/ch32v003/ch32v003fun.mk /#LINKER_SCRIPT/,/simple.ld/

I have substituted CNLohr's linker script with my own simplified one, `simple.ld`.

'--gc-sections' : garbage-collect unused sections. This reduces the size of the output binary.

Let's study `simple.ld` below.

.code src/ch32v003/simple.ld

The script states the entry point of the executable is `_start`.
`_start` is a label in our `blink.S` source file.

Also .text and .rodata sections should be placed in FLASH.  
And .data sections should be placed in RAM.

Finally note the `_eusrstack` which defines the location of end of user stack.
`_eusrstack` is used in `blink.S` to initialise the stack pointer.
